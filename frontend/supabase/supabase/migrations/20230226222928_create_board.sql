create extension if not exists "postgis" with schema "extensions";


create table "public"."boards" (
    "id" integer generated by default as identity not null,
    "name" text not null,
    "location" geography(Point,4326) not null,
    "price" real,
    "currency" text,
    "address" text,
    "date_creation" timestamp with time zone default now(),
    "date_update" timestamp with time zone default now(),
    "active" boolean default true,
    "description" text,
    "owner" uuid
);


create table "public"."user_contacts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "email" text,
    "subject" text,
    "message" text,
    "answered" boolean default false,
    "is_anonymous" boolean default true
);


CREATE UNIQUE INDEX boards_pkey ON public.boards USING btree (id);

CREATE UNIQUE INDEX contacts_pkey ON public.user_contacts USING btree (id);

alter table "public"."boards" add constraint "boards_pkey" PRIMARY KEY using index "boards_pkey";

alter table "public"."user_contacts" add constraint "contacts_pkey" PRIMARY KEY using index "contacts_pkey";

alter table "public"."boards" add constraint "boards_owner_fkey" FOREIGN KEY (owner) REFERENCES auth.users(id) not valid;

alter table "public"."boards" validate constraint "boards_owner_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_board(
    name text,
    address text,
    currency text,
    height float,
    width float,
    owner uuid,
    price float,
    location json
)
 RETURNS void
 LANGUAGE sql
AS $function$
  insert into boards(
    name,
    address,
    currency,
    height,
    width,
    owner,
    price,
    location
  ) values (
    name,
    address,
    currency,
    height,
    width,
    owner,
    price,
    ST_SetSRID(ST_MakePoint(cast(location ->> 'lng' as float), cast(location ->> 'lat' as float)), 4326)
  )
$function$
;

CREATE OR REPLACE FUNCTION public.nearby_boards(lat double precision, lng double precision)
 RETURNS SETOF record
 LANGUAGE sql
AS $function$
  select
    id,
    uuid,
    name,
    width,
    height,
    json_build_object('lng', ST_X(location::geometry), 'lat', ST_Y(location::geometry)) as location,
    st_distance(location, st_point(lng, lat)::geography) as dist_meters,
    width * height as area
  from public.boards
  where st_distance(location, st_point(lng, lat)::geography) < 10000
--   order by location <-> st_point(lng, lat)::geography;
    order by date_update
$function$
;

CREATE OR REPLACE FUNCTION public.user_boards(user_uuid uuid)
 RETURNS SETOF record
 LANGUAGE sql
AS $function$
  select
    *,
    json_build_object('lng', ST_X(location::geometry), 'lat', ST_Y(location::geometry)) as location
  from public.boards
  where user_uuid = boards.owner
$function$
;


